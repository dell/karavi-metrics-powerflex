// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/karavi-metrics-powerflex/internal/service (interfaces: MetricsRecorder,MeterCreater)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/dell/karavi-metrics-powerflex/internal/service"
	gomock "github.com/golang/mock/gomock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockMetricsRecorder is a mock of MetricsRecorder interface.
type MockMetricsRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRecorderMockRecorder
	isgomock struct{}
}

// MockMetricsRecorderMockRecorder is the mock recorder for MockMetricsRecorder.
type MockMetricsRecorderMockRecorder struct {
	mock *MockMetricsRecorder
}

// NewMockMetricsRecorder creates a new mock instance.
func NewMockMetricsRecorder(ctrl *gomock.Controller) *MockMetricsRecorder {
	mock := &MockMetricsRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricsRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRecorder) EXPECT() *MockMetricsRecorderMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockMetricsRecorder) Record(ctx context.Context, meta any, readBW, writeBW, readIOPS, writeIOPS, readLatency, writeLatency float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, meta, readBW, writeBW, readIOPS, writeIOPS, readLatency, writeLatency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockMetricsRecorderMockRecorder) Record(ctx, meta, readBW, writeBW, readIOPS, writeIOPS, readLatency, writeLatency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockMetricsRecorder)(nil).Record), ctx, meta, readBW, writeBW, readIOPS, writeIOPS, readLatency, writeLatency)
}

// RecordCapacity mocks base method.
func (m *MockMetricsRecorder) RecordCapacity(ctx context.Context, meta any, totalLogicalCapacity, logicalCapacityAvailable, logicalCapacityInUse, logicalProvisioned float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCapacity", ctx, meta, totalLogicalCapacity, logicalCapacityAvailable, logicalCapacityInUse, logicalProvisioned)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCapacity indicates an expected call of RecordCapacity.
func (mr *MockMetricsRecorderMockRecorder) RecordCapacity(ctx, meta, totalLogicalCapacity, logicalCapacityAvailable, logicalCapacityInUse, logicalProvisioned any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCapacity", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordCapacity), ctx, meta, totalLogicalCapacity, logicalCapacityAvailable, logicalCapacityInUse, logicalProvisioned)
}

// RecordTopologyMetrics mocks base method.
func (m *MockMetricsRecorder) RecordTopologyMetrics(ctx context.Context, meta any, topologyMetrics *service.TopologyMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTopologyMetrics", ctx, meta, topologyMetrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTopologyMetrics indicates an expected call of RecordTopologyMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordTopologyMetrics(ctx, meta, topologyMetrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTopologyMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordTopologyMetrics), ctx, meta, topologyMetrics)
}

// MockMeterCreater is a mock of MeterCreater interface.
type MockMeterCreater struct {
	ctrl     *gomock.Controller
	recorder *MockMeterCreaterMockRecorder
	isgomock struct{}
}

// MockMeterCreaterMockRecorder is the mock recorder for MockMeterCreater.
type MockMeterCreaterMockRecorder struct {
	mock *MockMeterCreater
}

// NewMockMeterCreater creates a new mock instance.
func NewMockMeterCreater(ctrl *gomock.Controller) *MockMeterCreater {
	mock := &MockMeterCreater{ctrl: ctrl}
	mock.recorder = &MockMeterCreaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterCreater) EXPECT() *MockMeterCreaterMockRecorder {
	return m.recorder
}

// MeterProvider mocks base method.
func (m *MockMeterCreater) MeterProvider() metric.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeterProvider")
	ret0, _ := ret[0].(metric.Meter)
	return ret0
}

// MeterProvider indicates an expected call of MeterProvider.
func (mr *MockMeterCreaterMockRecorder) MeterProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeterProvider", reflect.TypeOf((*MockMeterCreater)(nil).MeterProvider))
}
