// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/karavi-metrics-powerflex/internal/service (interfaces: TokenGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenGetter is a mock of TokenGetter interface.
type MockTokenGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGetterMockRecorder
}

// MockTokenGetterMockRecorder is the mock recorder for MockTokenGetter.
type MockTokenGetterMockRecorder struct {
	mock *MockTokenGetter
}

// NewMockTokenGetter creates a new mock instance.
func NewMockTokenGetter(ctrl *gomock.Controller) *MockTokenGetter {
	mock := &MockTokenGetter{ctrl: ctrl}
	mock.recorder = &MockTokenGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGetter) EXPECT() *MockTokenGetterMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockTokenGetter) GetToken(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenGetterMockRecorder) GetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenGetter)(nil).GetToken), arg0)
}

// Stop mocks base method.
func (m *MockTokenGetter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTokenGetterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTokenGetter)(nil).Stop))
}
