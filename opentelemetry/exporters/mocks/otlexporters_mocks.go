/*
 Copyright (c) 2020-2022 Dell Inc. or its subsidiaries. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0
	 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/karavi-metrics-powerflex/opentelemetry/exporters (interfaces: Otlexporter)

// Package exportermocks is a generated GoMock package.
package exportermocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	otlpmetricgrpc "go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc"
)

// MockOtlexporter is a mock of Otlexporter interface.
type MockOtlexporter struct {
	ctrl     *gomock.Controller
	recorder *MockOtlexporterMockRecorder
}

// MockOtlexporterMockRecorder is the mock recorder for MockOtlexporter.
type MockOtlexporterMockRecorder struct {
	mock *MockOtlexporter
}

// NewMockOtlexporter creates a new mock instance.
func NewMockOtlexporter(ctrl *gomock.Controller) *MockOtlexporter {
	mock := &MockOtlexporter{ctrl: ctrl}
	mock.recorder = &MockOtlexporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtlexporter) EXPECT() *MockOtlexporterMockRecorder {
	return m.recorder
}

// InitExporter mocks base method.
func (m *MockOtlexporter) InitExporter(arg0 ...otlpmetricgrpc.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitExporter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitExporter indicates an expected call of InitExporter.
func (mr *MockOtlexporterMockRecorder) InitExporter(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitExporter", reflect.TypeOf((*MockOtlexporter)(nil).InitExporter), arg0...)
}

// StopExporter mocks base method.
func (m *MockOtlexporter) StopExporter() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExporter")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopExporter indicates an expected call of StopExporter.
func (mr *MockOtlexporterMockRecorder) StopExporter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExporter", reflect.TypeOf((*MockOtlexporter)(nil).StopExporter))
}
